Customer Segmentation using KMeans Clustering
Description
This repository contains a customer segmentation analysis that utilizes KMeans clustering to group customers based on their profiles and transaction histories. The model uses unsupervised learning to identify distinct customer segments, helping businesses understand customer behavior and tailor marketing strategies accordingly.

Key Features:
Data cleaning and preprocessing
Clustering using KMeans
Evaluation using Davies-Bouldin Index
Visualization of clusters using scatter plots
Generation of a Customer Segmentation Report
Files
Customers.csv: Contains customer-related information (e.g., demographics, profile details).
Transactions.csv: Contains transaction data (e.g., total amount spent, frequency of purchases).
clustering_report.txt: A generated text file that contains the clustering analysis report.
Customer_Segmentation.ipynb: Jupyter notebook or Python script that performs clustering and analysis.
README.md: This file explaining the project, how to set it up, and how to run the code.
Requirements
Before running the code, ensure you have the following Python libraries installed:

pandas
numpy
scikit-learn
matplotlib
seaborn
You can install the necessary libraries using the following command:

bash
Copy
pip install pandas numpy scikit-learn matplotlib seaborn
Approach
1. Data Loading and Preprocessing
We load the two CSV files — Customers.csv and Transactions.csv — and merge them based on the customer_id. We also handle missing values by filling them with the mean of each numeric column.

python
Copy
customers_df = pd.read_csv('Customers.csv')
transactions_df = pd.read_csv('Transactions.csv')

# Merge the datasets on 'customer_id'
merged_df = pd.merge(customers_df, transactions_df, on='customer_id')

# Fill missing numeric values with the mean
numeric_cols = merged_df.select_dtypes(include=[np.number]).columns
merged_df[numeric_cols].fillna(merged_df[numeric_cols].mean(), inplace=True)
2. Data Standardization
We standardize the numeric features to bring all data to the same scale using StandardScaler. This step ensures that each feature contributes equally to the clustering process.

python
Copy
scaler = StandardScaler()
scaled_data = scaler.fit_transform(merged_df[numeric_cols])
3. KMeans Clustering
We apply KMeans clustering to segment the customers into distinct groups. The number of clusters is set to 5 as an example, but you can experiment with different values.

python
Copy
kmeans = KMeans(n_clusters=5, random_state=42)
clusters = kmeans.fit_predict(scaled_data)
4. Clustering Evaluation
We evaluate the clustering results using the Davies-Bouldin Index. This index measures the compactness and separation of clusters, with a lower value indicating better clustering performance.

python
Copy
db_index = davies_bouldin_score(scaled_data, clusters)
print(f"Davies-Bouldin Index: {db_index}")
5. Cluster Visualization
A scatter plot is generated to visualize the clusters in a 2D space. This helps in visually understanding how the customers are grouped based on the clustering algorithm.

python
Copy
plt.figure(figsize=(10, 7))
sns.scatterplot(x=scaled_data[:, 0], y=scaled_data[:, 1], hue=clusters, palette='viridis')
plt.title("Cluster Visualization")
plt.show()
6. Customer Segmentation Report
A report is generated summarizing the clustering results, including the number of clusters and Davies-Bouldin Index score.

python
Copy
report = f"""
### Customer Segmentation Report

**Number of Clusters Formed:** 5

**Davies-Bouldin Index Value:** {db_index}

### Conclusion
Our clustering analysis indicates 5 distinct customer segments based on given profile and transaction data.
"""

print(report)
7. Saving the Report
The segmentation analysis report is saved as a text file (clustering_report.txt), which includes details on the number of clusters and the evaluation metric.

python
Copy
with open("clustering_report.txt", "w") as file:
    file.write(report)
How to Run
Clone this repository:

bash
Copy
git clone https://github.com/your-username/customer-segmentation.git
Navigate to the folder containing the script:

bash
Copy
cd customer-segmentation
Open the Jupyter notebook and run all the cells, or run the Python script to perform clustering and generate the report.

bash
Copy
jupyter notebook Customer_Segmentation.ipynb
After running the script, the cluster visualization will be displayed, and the segmentation report will be saved as clustering_report.txt.
Output
clustering_report.txt: Contains a summary of the clustering analysis, including the Davies-Bouldin Index and the number of clusters.
Cluster Visualization: A scatter plot visualizing the customer segments.
Evaluation Metrics
Davies-Bouldin Index: This is used to evaluate the clustering quality. A lower score indicates better-defined and separated clusters.
Conclusion
The Customer Segmentation analysis provides insights into how customers can be grouped based on their profile and transaction behavior. These clusters can help businesses with targeted marketing, personalized recommendations, and better customer insights.

